/*
 * Web of Science API Lite
 * A responsive API that supports rich searching across the Web of Science Core Collection to retrieve core article metadata.  This service provides a great way to reuse Web of Science data both internally and externally to enhance  institutional repositories and research networking systems with best-in-class data. This API supports searching across the Web of Science to retrieve item-level metadata with limited fields:  - UT (Unique Identifier) - Authors - Author keywords - Document type - Title - Issue - Pages - Publication date - Source title - Volume - DOI - ISBN - ISSN   The API supports JSON and XML responses, and this documentation supports trying both response types. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clarivate.woslite.models;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * QueryResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-06-02T10:06:41.554+02:00[Europe/Berlin]")
public class QueryResult {
  public static final String SERIALIZED_NAME_QUERY_I_D = "QueryID";
  @SerializedName(SERIALIZED_NAME_QUERY_I_D)
  private Integer queryID;

  public static final String SERIALIZED_NAME_RECORDS_SEARCHED = "RecordsSearched";
  @SerializedName(SERIALIZED_NAME_RECORDS_SEARCHED)
  private Long recordsSearched;

  public static final String SERIALIZED_NAME_RECORDS_FOUND = "RecordsFound";
  @SerializedName(SERIALIZED_NAME_RECORDS_FOUND)
  private Long recordsFound;


  public QueryResult queryID(Integer queryID) {
    
    this.queryID = queryID;
    return this;
  }

   /**
   * The ID of the query that can be used for pagination.  Note: The id will expire after four hours (session duration) and during a session you can have maximum 2,500 Queries.  The QueryIDs will be reused (starting from 1) if more than 2,500 queries are requested within a session.  The session will expire after four hours inactivity,  i.e. no requests with the token.  Use always &#x60;x-paginate-by-query-id&#x60; Header to paginate through records. The response time will be faster by using QueryID. 
   * @return queryID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The ID of the query that can be used for pagination.  Note: The id will expire after four hours (session duration) and during a session you can have maximum 2,500 Queries.  The QueryIDs will be reused (starting from 1) if more than 2,500 queries are requested within a session.  The session will expire after four hours inactivity,  i.e. no requests with the token.  Use always `x-paginate-by-query-id` Header to paginate through records. The response time will be faster by using QueryID. ")

  public Integer getQueryID() {
    return queryID;
  }


  public void setQueryID(Integer queryID) {
    this.queryID = queryID;
  }


  public QueryResult recordsSearched(Long recordsSearched) {
    
    this.recordsSearched = recordsSearched;
    return this;
  }

   /**
   * The overrall number of records available in Web of Science.
   * @return recordsSearched
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "177587322", value = "The overrall number of records available in Web of Science.")

  public Long getRecordsSearched() {
    return recordsSearched;
  }


  public void setRecordsSearched(Long recordsSearched) {
    this.recordsSearched = recordsSearched;
  }


  public QueryResult recordsFound(Long recordsFound) {
    
    this.recordsFound = recordsFound;
    return this;
  }

   /**
   * The number of records of your request that are filtered through usrQuery but as well other query parameters.
   * @return recordsFound
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "17", value = "The number of records of your request that are filtered through usrQuery but as well other query parameters.")

  public Long getRecordsFound() {
    return recordsFound;
  }


  public void setRecordsFound(Long recordsFound) {
    this.recordsFound = recordsFound;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResult queryResult = (QueryResult) o;
    return Objects.equals(this.queryID, queryResult.queryID) &&
        Objects.equals(this.recordsSearched, queryResult.recordsSearched) &&
        Objects.equals(this.recordsFound, queryResult.recordsFound);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryID, recordsSearched, recordsFound);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResult {\n");
    sb.append("    queryID: ").append(toIndentedString(queryID)).append("\n");
    sb.append("    recordsSearched: ").append(toIndentedString(recordsSearched)).append("\n");
    sb.append("    recordsFound: ").append(toIndentedString(recordsFound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

